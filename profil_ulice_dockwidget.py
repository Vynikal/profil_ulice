# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ProfilUliceDockWidget
                                 A QGIS plugin
 Vytvoří profil ulice zvolené linie
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2022-03-30
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Jakub Vynikal
        email                : jakub.vynikal@fsv.cvut.cz
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

from qgis.PyQt import QtGui, QtWidgets, uic
from qgis.PyQt.QtCore import pyqtSignal
from .create_profile import Street
import os

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'profil_ulice_dockwidget_base.ui'))


class ProfilUliceDockWidget(QtWidgets.QDockWidget, FORM_CLASS):

    closingPlugin = pyqtSignal()

    def __init__(self, parent=None):
        """Constructor."""
        super(ProfilUliceDockWidget, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://doc.qt.io/qt-5/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.PbCreate.clicked.connect(self.parse_args)

    def closeEvent(self, event):
        self.closingPlugin.emit()
        event.accept()

    def parse_args(self):
        sirka = self.SbWidth.value()

        profil = Street(sirka)
        profil.create_profile()
